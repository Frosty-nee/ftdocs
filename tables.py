tables = {
    'FleetInfo': {
        'ID': 'int: unique ID of the fleet',
        'Name': 'string: Name of the fleet',
        'Flagship': 'FriendlyInfo: Information about the flagship of the fleet',
        'Members': 'Friendlyinfo[]: a table of information regarding the fleet\'s members. MAY CONTAIN NILS',
        },
    'ResourceZoneInfo': {
        'Id': 'int: Unique ID of the Resource Zone',
        'Name': 'string: Name of the Resource Zone',
        'Position': 'Vector3: Position of the resource Zone',
        'Radius': 'float: Radius of the resource Zone',
        'Resources': 'ResourceInfo: Available resources of the Resource Zone',
        },
    'ResourceInfo' : {
        'CrystalTotal': 'float: Total Crystal Resources',
        'CrystalMax': 'float: Max Crystal Resources',
        'MetalTotal': 'float: Total Metal Resources',
        'MetalMax': 'float: Max Metal Resources',
        'NaturalTotal': 'float: Total Natural Resources',
        'NaturalMax': 'float: Max Natural Resources',
        'OilTotal': 'float: Total Oil Resources',
        'OilMax': 'float: Max Oil Resources',
        'ScrapTotal': 'float: Total Scrap Resources',
        'ScrapMax': 'float: Max Scrap Resources',
        },
    'TargetInfo': {
        'Valid': 'bool: true if a target was correctly returned',
        'Priority': 'int: 0 is the highest priority',
        'Score': 'float: High is a good score, taken from Target prioritization card',
        'AimPointPosition': 'Vector3: Position in game world of aim point (this is the current position of the block that\'s being aimed for',
        'Team': 'int: team of target', 
        'Protected': 'bool: is it salvage? will be false for salvage',
        'Position': 'Vector3: position in game world of target object',
        'Velocity': 'Vector3: Velocity in game world in meters per second',
        'PlayerTargetChoice': 'bool: has the player set this as the target?',
        'Id': 'int: the unique integer ID of the target',
        },
    'TargetPositionInfo': {
        'Valid': 'bool: true if a target position info was correctly returned',
        'Azimuth': 'float: degrees off nose of our vehicle where positive is clockwise',
        'Elevation': 'float: degrees off nose of our vehicle where positive is downwards. This often hasdodgy values',
        'ElevationForAltitudeComponentOnly': 'float: the elevation off nose of the target\'s altitude. Robustly calculated',
        'Range': 'float: the range to the target',
        'Direction': 'Vector3: the direction to the target (absolute, not normalized)',
        'GroundDistance': 'float: the distance along the ground (ignoring vertical component) to the target',
        'AltitudeAboveSeaLevel': 'float: in meters',
        'Position': 'Vector3: position of target',
        'Velocity': 'Vector3: Meters per second',
        },
    'BlockInfo': {
        'Position': 'bool: false means this BlockInfo packet is useless',
        'LocalPosition': 'Vector3: Position in world (east, up, north)',
        'LocalPoisitionRelativeToCom': 'Vector3: Local position relative to the center of mass',
        'Forwards': 'Vector3: Forwards Direction in world(east, up, north)',
        'LocalForwards': 'Vector3: Forwards direction in construct (right, up, forwards)',
        'Rotation': 'Quaternion: the rotation of the block in world coordinates',
        'LocalRotation': 'Quaternion: the rotation of the block in the vehicle\'s (or turret\'s) coordinate system',
        'SubConstructIdentifier': 'int: the sub construct identifier of the subconstruct the block is part of',
        'CustomName': 'string: the custom name assigned to the block',
        },
    'WeaponInfo': {
        'Valid': 'bool: false means this WeaponInfo packet is useless, move on to the next valid one',
        'LocalPosition': 'Vector3: local position in the vehicle of the weapon, x is right, y is up, z is forwards',
        'GlobalPosition': 'Vector3: The global position of the weapon, x is East, Y is up, Z is north',
        'LocalFirePoint': 'Vector3: the local position in the vehicle where the projectile or laser will be created',
        'GlobalFirePoint': 'Vector3: the global position in the world where the projectile or laser will be created',
        'Speed': 'float: the speed in meters per second of the weapon. approximately correct for most weapon types',
        'CurrentDirection': 'Vector3: the direction in global coordinate system that the weapon is facing',
        'WeaponType': 'Int: the type of weapon, Cannon = 0, Missile = 1, Laser = 2, Harpoon = 3, Turret = 4, Missile Control = 5, FireControlComputer = 6',
        'WeaponSlot': 'int: the weapon slot of the weapon itself',
        'PlayerCurrentlyControllingIt': 'bool: true if the player is controlling this weapon at the moment',
        },
    'WeaponConstraints': {
        'Valid': 'bool: false means this WeaponConstraints packet is useless. move on to the next valid one',
        'MinAzimuth': 'float: the minimum Azimuth in degrees',
        'MaxAzimuth': 'float: the maximum Azimuth in degrees',
        'MinElevation': 'float: the minimum Elevation in degrees',
        'MaxElevation': 'float: the maximimum Elevation in degrees',
        'FlipAzimuth': 'bool: true if the "flip azimuth constraints" toggle is selected',
        'InParentConstructSpace': 'bool: true of the "set the restrictions in the parent construct space" toggle is selected',
        },
    'MissileWarningInfo': {
        'Valid': 'bool: false if the warning is junk due to incorrect indices',
        'Position': 'Vector3: the position of the missile',
        'Velocity': 'Vector3: the velocity of the missile in meters per second',
        'Range': 'float: the distance from Center of Mass of your construct to the missile',
        'Azimuth': 'float: the azimuth angle between your construct\'s forward direction and the missile',
        'Elevation': 'float: the elevation angle between your construct\'s forward direction and the missile',
        'TimeSinceLaunch': 'float: the time since the missile launch',
        'Id': 'int: the unique Id of the missile,',
    },
    'FriendlyInfo': {
        'Valid': 'bool: false if the firnedly info could not be retrieved',
        'Rotation': 'Quaternion: The rotation of the friendly construct',
        'ReferencePosition': 'Vector3: The position of the construct (world east up north frame) from which PositiveSize and NegativeSize are referenced',
        'PositiveSize': 'Vector3: the extend of the construct in the right,up,forward direction relative to ReferencePosition',
        'NegativeSize': 'Vector3: the extent of the construct in the left, down, back direction relative to ReferencePosition',
        'CenterOfMass': 'Vector3: the centre of mass of the construct in world east, up, north frame',
        'Velocity': 'Vector3: The velocity of the construct in world east up north frame',
        'UpVector': 'Vector3: the up vector of the construct in world east up north frame',
        'RightVector': 'Vector3: the up vector of the construct in world east up north frame',
        'ForwardVector': 'Vector3: the forward vector in world east up north frame',
        'HealthFraction': 'float: the fraction of health, including turrets etc',
        'SparesFraction': 'float: the fraction of spares, returns 1 if no spares storage present',
        'AmmoFraction': 'float: the fraction of ammo, returns 1 if no ammo storage present',
        'FuelFraction': 'float: the fuel fraction, returns 1 if no fuel storage present',
        'EnergyFraction': 'float: returns 1 if no batteries present',
        'AxisAlignedBoundingBoxMinimum': 'Vector3: the world east up north minimum extent of the construct',
        'AxisAlignedBoundingBoxMaximum': 'Vector3: the world east up north maximum extent of the construct',
        'BlueprintName': 'string: the name',
        'Id': 'int: the unique Id of the construct',
        },
}
